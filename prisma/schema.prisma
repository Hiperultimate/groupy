// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id                  String    @id @default(cuid())
    name                String
    email               String    @unique
    password            String   
    dateOfBirth         DateTime  
    atTag               String    @unique
    description         String?
    tags                Tag[]
    posts               Post[]
    friendList          Friendship[]
    image               String? 
    postsLiked          UserLikedPost[]
    userComments        Comment[]
    userNotifications   Notification[]
}

enum NotificationType {
    MESSAGE
    FRIENDREQUEST
}

model Notification{
    id          String              @id @default(cuid())
    type        NotificationType    @default(MESSAGE)
    message     String 

    user        User?               @relation(fields: [userId], references: [id])
    userId      String? 

    createdAt   DateTime            @default(now())

}

model Friendship {
    id          String    @id @default(cuid())

    user        User      @relation(fields: [friendId], references: [id])
    friendId    String 

    createdAt   DateTime  @default(now())
}

model Tag {
    id        String   @id @default(uuid())
    name      String   @unique    
    users     User[]
    onPost    Post[]   
}

model Post {
  id        String      @id @default(uuid())
  content   String
  image     String?
  tags      Tag[]
  author    User        @relation(fields: [authorId], references: [id])
  authorId  String
  comments  Comment[] 
  likedBy   UserLikedPost[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model UserLikedPost {
    id        String      @id @default(uuid())
    
    user      User        @relation(fields: [userId], references: [id])
    userId    String 

    post      Post        @relation(fields: [postId], references: [id])
    postId    String   

    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}

model Comment {
  id        String       @id @default(uuid())
  content   String
  post      Post         @relation(fields: [postId], references: [id])
  postId    String

  author    User        @relation(fields: [authorId], references: [id])
  authorId  String

  createdAt DateTime    @default(now())
}

