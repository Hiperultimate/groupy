// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model User {
    id                  String              @id @default(cuid())
    name                String
    email               String              @unique
    password            String   
    dateOfBirth         DateTime  
    atTag               String              @unique
    description         String?
    tags                Tag[]
    posts               Post[]
    image               String? 
    postsLiked          UserLikedPost[]
    userComments        Comment[]
    myNotifications     Notification[]      @relation(name: "notificationReceived")
    sentNotifications   Notification[]      @relation(name: "notificationSent") 
    
    friendList          User[]              @relation(name: "UserFriends") 

    joinedGroups        UserGroups[] 
    userChatMessages    ChatMessage[]  
    unreadMessages      UnreadMessage[]  
    moderatingGroups    Group[] 
    // This second "side" of the UserFriends relation exists solely 
    // to satisfy prisma's requirements; we won't access it directly.     
    symmetricFriends    User[]              @relation(name: "UserFriends")      
}

enum NotificationType {
    MESSAGE
    FRIENDREQUEST
}

model Notification{
    id                   String              @id @default(cuid())
    type                 NotificationType    @default(MESSAGE)
    message              String 

    receivingUser        User                @relation(name: "notificationReceived" ,fields: [receivingUserId], references: [id])
    receivingUserId      String 

    sendingUser          User?               @relation(name: "notificationSent", fields: [sendingUserId], references: [id])
    sendingUserId        String?

    createdAt            DateTime            @default(now())

}

model Tag {
    id        String   @id @default(uuid())
    name      String   @unique    
    users     User[]
    onPost    Post[]   
}

model Post {
  id        String      @id @default(uuid())
  content   String
  image     String?
  tags      Tag[]
  author    User        @relation(fields: [authorId], references: [id])
  authorId  String
  groupId   String?
  comments  Comment[] 
  likedBy   UserLikedPost[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model UserLikedPost {
    id        String      @id @default(uuid())
    
    user      User        @relation(fields: [userId], references: [id])
    userId    String 

    post      Post        @relation(fields: [postId], references: [id])
    postId    String   

    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}

model Comment {
  id        String       @id @default(uuid())
  content   String
  post      Post         @relation(fields: [postId], references: [id])
  postId    String

  author    User        @relation(fields: [authorId], references: [id])
  authorId  String

  createdAt DateTime    @default(now())
}

model Group {
    id          String          @id @default(uuid())
    name        String 
    image       String?

    moderators  User[]     
    users       UserGroups[]
    messages    ChatMessage[]

    minAgeLimit Int             @default(1)
    maxAgeLimit Int             @default(100)

    size        Int             @default(50)

    instantJoin Boolean         @default(true)

    userUnreadMessage UnreadMessage[]
}

model UnreadMessage {
  id                    String       @id @default(uuid())
  user                  User         @relation(fields: [userId], references: [id])
  userId                String
  group                 Group        @relation(fields: [groupId], references: [id])
  groupId               String
  unreadMessageCount    Int          @default(0)

  @@unique([userId, groupId])
}

model UserGroups {
    id      String      @id @default(uuid())

    user    User        @relation(fields: [userId], references: [id])
    userId  String

    group   Group       @relation(fields: [groupId], references: [id])
    groupId String
}       

model ChatMessage {
    id              String      @id @default(uuid())

    sender          User        @relation(fields: [senderId], references: [id])
    senderId        String 

    group           Group       @relation(fields: [groupId], references: [id])
    groupId         String

    sentAt          DateTime    @default(now())
    message         String
}